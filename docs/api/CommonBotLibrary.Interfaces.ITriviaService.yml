### YamlMime:ManagedReference
items:
- uid: CommonBotLibrary.Interfaces.ITriviaService
  commentId: T:CommonBotLibrary.Interfaces.ITriviaService
  id: ITriviaService
  parent: CommonBotLibrary.Interfaces
  children:
  - CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync(System.Int32)
  langs:
  - csharp
  - vb
  name: ITriviaService
  nameWithType: ITriviaService
  fullName: CommonBotLibrary.Interfaces.ITriviaService
  type: Interface
  source:
    id: ITriviaService
    path: ''
    startLine: 450
  assemblies:
  - cs.temp.dll
  namespace: CommonBotLibrary.Interfaces
  syntax:
    content: public interface ITriviaService
    content.vb: Public Interface ITriviaService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync(System.Int32)
  commentId: M:CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync(System.Int32)
  id: GetTriviaAsync(System.Int32)
  parent: CommonBotLibrary.Interfaces.ITriviaService
  langs:
  - csharp
  - vb
  name: GetTriviaAsync(Int32)
  nameWithType: ITriviaService.GetTriviaAsync(Int32)
  fullName: CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync(System.Int32)
  type: Method
  source:
    id: GetTriviaAsync
    path: ''
    startLine: 457
  assemblies:
  - cs.temp.dll
  namespace: CommonBotLibrary.Interfaces
  summary: "\nGets trivia questions.\n"
  example: []
  syntax:
    content: Task<IEnumerable<TriviaBase>> GetTriviaAsync(int amount)
    parameters:
    - id: amount
      type: System.Int32
      description: The amount of results to retrieve.
    return:
      type: Task{IEnumerable{TriviaBase}}
      description: A collection of relevant trivia.
    content.vb: Function GetTriviaAsync(amount As Integer) As Task(Of IEnumerable(Of TriviaBase))
  overload: CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync*
references:
- uid: CommonBotLibrary.Interfaces
  commentId: N:CommonBotLibrary.Interfaces
  isExternal: false
  name: CommonBotLibrary.Interfaces
  nameWithType: CommonBotLibrary.Interfaces
  fullName: CommonBotLibrary.Interfaces
- uid: CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync*
  commentId: Overload:CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync
  isExternal: false
  name: GetTriviaAsync
  nameWithType: ITriviaService.GetTriviaAsync
  fullName: CommonBotLibrary.Interfaces.ITriviaService.GetTriviaAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Task{IEnumerable{TriviaBase}}
  commentId: '!:Task{IEnumerable{TriviaBase}}'
  definition: Task`1
  name: Task<IEnumerable<TriviaBase>>
  nameWithType: Task<IEnumerable<TriviaBase>>
  fullName: Task<IEnumerable<TriviaBase>>
  nameWithType.vb: Task(Of IEnumerable(Of TriviaBase))
  fullName.vb: Task(Of IEnumerable(Of TriviaBase))
  name.vb: Task(Of IEnumerable(Of TriviaBase))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TriviaBase
    name: TriviaBase
    nameWithType: TriviaBase
    fullName: TriviaBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TriviaBase
    name: TriviaBase
    nameWithType: TriviaBase
    fullName: TriviaBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
