### YamlMime:ManagedReference
items:
- uid: CommonBotLibrary.Services.TwitterService
  commentId: T:CommonBotLibrary.Services.TwitterService
  id: TwitterService
  parent: CommonBotLibrary.Services
  children:
  - CommonBotLibrary.Services.TwitterService.#ctor(ITwitterCredentials)
  - CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync(System.String,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: TwitterService
  nameWithType: TwitterService
  fullName: CommonBotLibrary.Services.TwitterService
  type: Class
  source:
    id: TwitterService
    path: ''
    startLine: 1704
  assemblies:
  - cs.temp.dll
  namespace: CommonBotLibrary.Services
  syntax:
    content: 'public class TwitterService : IWebpageService, ISearchable<IWebpage>'
    content.vb: >-
      Public Class TwitterService
          Inherits IWebpageService
          Implements ISearchable(Of IWebpage)
  inheritance:
  - System.Object
  implements:
  - ISearchable{IWebpage}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CommonBotLibrary.Services.TwitterService.#ctor(ITwitterCredentials)
  commentId: M:CommonBotLibrary.Services.TwitterService.#ctor(ITwitterCredentials)
  id: '#ctor(ITwitterCredentials)'
  parent: CommonBotLibrary.Services.TwitterService
  langs:
  - csharp
  - vb
  name: TwitterService(ITwitterCredentials)
  nameWithType: TwitterService.TwitterService(ITwitterCredentials)
  fullName: CommonBotLibrary.Services.TwitterService.TwitterService(ITwitterCredentials)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1711
  assemblies:
  - cs.temp.dll
  namespace: CommonBotLibrary.Services
  summary: "\nConstructs an <see cref=\"!:IWebpageService\"></see> implementation that searches Twitter.\n"
  example: []
  syntax:
    content: public TwitterService(ITwitterCredentials credentials = null)
    parameters:
    - id: credentials
      type: ITwitterCredentials
      description: Defaults to Twitter property in <xref href="CommonBotLibrary.Tokens" data-throw-if-not-resolved="false"></xref> if null.
    content.vb: Public Sub New(credentials As ITwitterCredentials = Nothing)
  overload: CommonBotLibrary.Services.TwitterService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync(System.String,System.Boolean,System.Boolean)
  commentId: M:CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync(System.String,System.Boolean,System.Boolean)
  id: GetRecentTweetsAsync(System.String,System.Boolean,System.Boolean)
  parent: CommonBotLibrary.Services.TwitterService
  langs:
  - csharp
  - vb
  name: GetRecentTweetsAsync(String, Boolean, Boolean)
  nameWithType: TwitterService.GetRecentTweetsAsync(String, Boolean, Boolean)
  fullName: CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    id: GetRecentTweetsAsync
    path: ''
    startLine: 1737
  assemblies:
  - cs.temp.dll
  namespace: CommonBotLibrary.Services
  summary: "\nSearches twitter.com for recent tweets of a user.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<ITweet>> GetRecentTweetsAsync(string handle, bool includeRTs = true, bool includeReplies = false)
    parameters:
    - id: handle
      type: System.String
      description: The handle of the user to fetch tweets for.
    - id: includeRTs
      type: System.Boolean
      description: Include retweets in response or not.
    - id: includeReplies
      type: System.Boolean
      description: Include replies in response or not.
    return:
      type: Task{IEnumerable{ITweet}}
      description: A collection of relevant tweets.
    content.vb: Public Function GetRecentTweetsAsync(handle As String, includeRTs As Boolean = True, includeReplies As Boolean = False) As Task(Of IEnumerable(Of ITweet))
  overload: CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync*
  seealso:
  - linkType: HRef
    linkId: https://dev.twitter.com/overview/terms
    altText: TOS
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CommonBotLibrary.Services
  commentId: N:CommonBotLibrary.Services
  isExternal: false
  name: CommonBotLibrary.Services
  nameWithType: CommonBotLibrary.Services
  fullName: CommonBotLibrary.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: ISearchable{IWebpage}
  commentId: '!:ISearchable{IWebpage}'
  definition: ISearchable`1
  name: ISearchable<IWebpage>
  nameWithType: ISearchable<IWebpage>
  fullName: ISearchable<IWebpage>
  nameWithType.vb: ISearchable(Of IWebpage)
  fullName.vb: ISearchable(Of IWebpage)
  name.vb: ISearchable(Of IWebpage)
  spec.csharp:
  - uid: ISearchable`1
    name: ISearchable
    nameWithType: ISearchable
    fullName: ISearchable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IWebpage
    name: IWebpage
    nameWithType: IWebpage
    fullName: IWebpage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISearchable`1
    name: ISearchable
    nameWithType: ISearchable
    fullName: ISearchable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IWebpage
    name: IWebpage
    nameWithType: IWebpage
    fullName: IWebpage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ISearchable`1
  isExternal: true
  name: ISearchable<>
  nameWithType: ISearchable<>
  fullName: ISearchable<>
  nameWithType.vb: ISearchable(Of )
  fullName.vb: ISearchable(Of )
  name.vb: ISearchable(Of )
  spec.csharp:
  - uid: ISearchable`1
    name: ISearchable
    nameWithType: ISearchable
    fullName: ISearchable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISearchable`1
    name: ISearchable
    nameWithType: ISearchable
    fullName: ISearchable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CommonBotLibrary.Tokens
  commentId: T:CommonBotLibrary.Tokens
  isExternal: false
  name: Tokens
  nameWithType: Tokens
  fullName: CommonBotLibrary.Tokens
- uid: CommonBotLibrary.Services.TwitterService.#ctor*
  commentId: Overload:CommonBotLibrary.Services.TwitterService.#ctor
  isExternal: false
  name: TwitterService
  nameWithType: TwitterService.TwitterService
  fullName: CommonBotLibrary.Services.TwitterService.TwitterService
- uid: ITwitterCredentials
  commentId: '!:ITwitterCredentials'
  isExternal: true
  name: ITwitterCredentials
  nameWithType: ITwitterCredentials
  fullName: ITwitterCredentials
- uid: CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync*
  commentId: Overload:CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync
  isExternal: false
  name: GetRecentTweetsAsync
  nameWithType: TwitterService.GetRecentTweetsAsync
  fullName: CommonBotLibrary.Services.TwitterService.GetRecentTweetsAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Task{IEnumerable{ITweet}}
  commentId: '!:Task{IEnumerable{ITweet}}'
  definition: Task`1
  name: Task<IEnumerable<ITweet>>
  nameWithType: Task<IEnumerable<ITweet>>
  fullName: Task<IEnumerable<ITweet>>
  nameWithType.vb: Task(Of IEnumerable(Of ITweet))
  fullName.vb: Task(Of IEnumerable(Of ITweet))
  name.vb: Task(Of IEnumerable(Of ITweet))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ITweet
    name: ITweet
    nameWithType: ITweet
    fullName: ITweet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ITweet
    name: ITweet
    nameWithType: ITweet
    fullName: ITweet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
